plugins {
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'jacoco'
    id "org.sonarqube" version "2.8"
}

apply plugin: 'checkstyle'
apply plugin: "org.sonarqube"
apply plugin: "jacoco"

group = 'com.salapp.microservices.product.services'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property 'sonar.projectName', 'microservices-springboot'

        property "sonar.exclusions", "**/*Generated.java"
    }
}

jacoco {
    toolVersion = "0.8.2"
}

dependencies {
    implementation project(':api')
    implementation project(':util')

    implementation "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8"

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'io.projectreactor:reactor-test'
}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

test {
    useJUnitPlatform()
}

jacocoTestReport {
    group = 'Reporting'
    reports {
        xml.enabled true
        csv.enabled false
    }
}


checkstyle {
    toolVersion '7.8.1'
    //configFile file("config/checkstyle/checkstyle.xml")
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")
}
checkstyleMain {
    source = 'src/main/java'
}

checkstyleTest {
    source = 'src/test/java'
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output + configurations.testCompile
        runtimeClasspath += output + compileClasspath + configurations.testRuntime
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    mustRunAfter test
}

check.dependsOn integrationTest

/*task Javadocs(type: Javadoc) {
    source = sourceSets.main.allJava
}*/

javadoc {
    source = sourceSets.main.allJava
    //classpath = configurations.compile
}

/*


sourceSets {
    build {
        java.srcDir file('src/main/java')

    }
}
*/

def exportedProjects = [
        ':api', ':product-services'
]


task alljavadoc(type: Javadoc) {
    source exportedProjects.collect {
        project(it).sourceSets.main.allJava
    }
    classpath = files(exportedProjects.collect { project(it).sourceSets.main.compileClasspath })
    destinationDir = file("${buildDir}/docs/javadoc")
}
